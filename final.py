import math
import datetime
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense,LSTM
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
print('Enter the company code')
code = input()
print('Enter the start date')
startdate = input(datetime.date)
print('Enter the end date')
enddate = input(datetime.date)
data_frame = web.DataReader(code,data_source='yahoo',start=startdate,end=enddate)
print("The Historical data of ",code)
print(data_frame)
plt.figure(figsize=(12,7))
plt.title('Closing Price history')
plt.plot(data_frame['Close'])
plt.xlabel('Date',fontsize = 18)
plt.ylabel('Closing price USD($)',fontsize = 18)
plt.show()
x= np.array(data_frame.filter(['Low']))
y= np.array(data_frame.filter(['Close']))
x_t,x_st,y_t,y_st = train_test_split(x,y,test_size=0.2)
svr_rbf = SVR(kernel='rbf', C=1e3, gamma = 0.1)
svr_rbf.fit(x_t,y_t)
svm_score = svr_rbf.score(x_t,y_t)
print("The score of Support vector machine prediction")
print(svm_score)
l = LinearRegression()
l.fit(x_t,y_t)
l_score = l.score(x_t,y_t)
print("The score of Linear Regression prediction")
print(l_score)
x_f = np.array(data_frame.filter(['Close']))
lr_prediction = l.predict(x_f)
print("the predicted values using linearregression")
lr_prediction = np.reshape(lr_prediction,(lr_prediction.shape[0],1))
print(lr_prediction)
svr_prediction = svr_rbf.predict(x_f)
print("the predicted values using support vector machine")
svr_prediction = np.reshape(svr_prediction,(svr_prediction.shape[0],1))
print(svr_prediction)
data_frame = data_frame.filter(['Close'])
data = data_frame.filter(['Close'])
dataset = data.values
training_data_len = math.ceil(len(dataset*.8))
print(training_data_len)
s = MinMaxScaler(feature_range=(0,1))
scaled_data = s.fit_transform(dataset)
print("The scaled_data of the historical data")
print(scaled_data)
train_data = scaled_data[0:training_data_len,:]
x_t = []
y_t = []
for i in range(60,len(train_data)):
    x_t.append(train_data[i-60:i,0])
    y_t.append(train_data[i,0])
x_t,y_t = np.array(x_t),np.array(y_t)
x_t = np.reshape(x_t,(x_t.shape[0],x_t.shape[1],1))
x_t.shape
model = Sequential()
model.add(LSTM(50,return_sequences = True,input_shape = (x_t.shape[1],1)))
model.add(LSTM(50,return_sequences = False))
model.add(Dense(2))
model.add(Dense(1))
model.compile(optimizer = 'adam',loss = 'mean_squared_error')
print("The feedback cycles")
model.fit(x_t,y_t,batch_size=1,epochs=1)
print('Enter the start date for prediction')
stdate = input(datetime.date)
print('Enter the end date for prediction')
eddate = input(datetime.date)
cs1 = web.DataReader(code,data_source='yahoo',start=startdate,end=enddate)
new_df = cs1.filter(['Close'])
last = new_df[-60:].values
last_scale = s.transform(last)
x_st = []
x_st.append(last_scale)
x_st = np.array(x_st)
x_st = np.reshape(x_st,(x_st.shape[0],x_st.shape[1],1))
predicted_price = model.predict(x_st)
predicted_price = s.inverse_transform(predicted_price)
print("The average predicted value during time period ")
print(predicted_price)
dates = cs1.filter(['Low'])
prices= cs1.filter(['Close'])
dates = np.reshape(dates,(dates.shape[0],1))
svr_lin = SVR(kernel = 'linear',C=1e3)
svr_poly = SVR(kernel = 'poly',C=1e3,degree=2)
svr_rbf = SVR(kernel = 'rbf',C=1e3,gamma=0.1)
svr_lin.fit(dates,prices)
svr_poly.fit(dates,prices)
svr_rbf.fit(dates,prices)
plt.figure(figsize=(14,7))
plt.scatter(dates,prices,color='black',label='Data')
plt.plot(dates,svr_rbf.predict(dates),color='red',label='RBF model')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Predictions vs Data')
plt.legend()
plt.show()
plt.figure(figsize=(14,7))
plt.scatter(dates,prices,color='black',label='Data')
plt.plot(dates,svr_rbf.predict(dates),color='red',label='RBF model')
plt.plot(dates,svr_lin.predict(dates),color='green',label='linear model')
plt.plot(dates,svr_poly.predict(dates),color='blue',label='polynomial model')
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('Predictions vs Data')
plt.legend()
plt.show()
